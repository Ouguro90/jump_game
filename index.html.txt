<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>점프 게임</title>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        body {
            display: flex;
            flex-direction: column; /* 요소들을 세로로 정렬 */
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #f0f0f0;
            margin: 0;
            font-family: 'Press Start 2P', cursive;
            overflow: hidden;
        }

        .game-container {
            width: 80%;
            max-width: 600px;
            height: 300px;
            border: 5px solid #333;
            background-color: #87CEEB; /* 하늘색 배경 (기본) */
            position: relative;
            overflow: hidden;
            border-radius: 10px;
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
            transition: background-color 0.5s ease; /* 배경색 전환 효과 */
        }
        /* 보너스 스테이지 배경 스타일 */
        .game-container.bonus-stage {
            background-color: #FFD700; /* 금색 배경 (보너스) */
        }


        /* 캐릭터 스타일 */
        .character {
            width: 40px;
            height: 40px;
            position: absolute;
            bottom: 0;
            left: 50px;
            transition: width 0.3s ease, height 0.3s ease, box-shadow 0.3s ease;
        }

        /* 파워업 상태 캐릭터 스타일 */
        .character.character-powered-up {
            width: 55px; /* 크기 증가 */
            height: 55px; /* 크기 증가 */
            box-shadow: 0 0 15px 5px gold;
        }


        .character img { /* 캐릭터 이미지 스타일 */
            width: 100%;
            height: 100%;
            display: block;
            object-fit: contain; /* 이미지 비율 유지 */
        }

        /* 장애물 기본 스타일 */
        .obstacle {
            width: 30px;
            background-color: #228B22; /* 포레스트 그린 장애물 (기본) */
            border-radius: 5px;
            position: absolute;
            bottom: 0;
            right: -30px; /* 초기 위치 */
            display: block; /* 기본적으로 보이도록 */
        }

        /* 높은 장애물 스타일 추가 */
        .obstacle.obstacle-tall {
             background-color: #8B0000; /* 어두운 빨간색 (높은 장애물) */
        }

        /* 장애물 파괴 애니메이션 클래스 */
        .obstacle.obstacle-destroyed {
            animation: obstacleDestroy 0.3s ease-out forwards !important;
        }


        /* 아이템(코인) 스타일 */
        .item {
            width: 25px;
            height: 25px;
            background-color: #4682B4; /* SteelBlue 코인 */
            border-radius: 50%;
            position: absolute;
            /* bottom: 80px; */ /* JS에서 제어 */
            right: -80px; /* 초기 위치 */
            display: block;
        }

         /* 파워업 아이템 스타일 */
         .powerup-item {
            width: 30px;
            height: 30px;
            background-color: #DA70D6; /* Orchid 색 (파워업) */
            border: 2px solid #BA55D3; /* Medium Orchid 테두리 */
            border-radius: 3px;
            position: absolute;
            bottom: 100px;
            right: -150px;
            display: block;
         }

         /* 알파벳 아이템 스타일 */
         .alphabet-item {
            width: 35px;
            height: 35px;
            background-color: #FFA07A; /* LightSalmon 배경 */
            border: 2px solid #FA8072; /* Salmon 테두리 */
            border-radius: 5px;
            position: absolute;
            bottom: 60px; /* 코인보다 약간 낮게 */
            right: -200px; /* 더 늦게 등장 */
            display: flex; /* 내부 텍스트 중앙 정렬 */
            justify-content: center;
            align-items: center;
            font-size: 20px;
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 1px #555;
         }

        /* 애니메이션 키프레임 */
        @keyframes moveObstacle {
            from { right: -30px; transform: scale(1); opacity: 1; }
            to { right: 100%; transform: scale(1); opacity: 1; }
        }
         @keyframes moveItem {
             from { right: -80px; }
             to { right: 100%; }
        }
        @keyframes movePowerupItem {
             from { right: -150px; }
             to { right: 100%; }
        }
         @keyframes moveAlphabetItem { /* 알파벳 아이템 이동 */
             from { right: -200px; }
             to { right: 100%; }
        }
        @keyframes obstacleDestroy {
            0% { transform: scale(1); opacity: 1; }
            100% { transform: scale(0); opacity: 0; }
        }

        /* 게임 정보 표시 영역 스타일 */
        .game-info {
            margin-top: 10px; /* 게임 컨테이너와의 간격 */
            font-size: 16px;
            color: #333;
            text-align: center;
        }
         #collectedLettersDisplay {
            letter-spacing: 5px; /* 글자 간 간격 */
         }


        /* 점수 표시 (컨테이너 내부) */
        .score {
            position: absolute;
            top: 10px;
            left: 10px;
            font-size: 16px;
            color: #fff;
            text-shadow: 1px 1px 2px #000;
            z-index: 5; /* 다른 요소 위에 표시 */
        }
        /* 보너스 스테이지 메시지 (컨테이너 내부) */
        #bonusStageMessage {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 24px;
            color: white;
            background-color: rgba(0, 0, 0, 0.6);
            padding: 15px 30px;
            border-radius: 10px;
            text-align: center;
            z-index: 10;
            display: none; /* 평소엔 숨김 */
        }
         #bonusTimer {
            font-weight: bold;
            color: #FFEC8B; /* 밝은 노란색 */
         }


        .message-box {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 20px 40px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            text-align: center;
            border-radius: 10px;
            font-size: 20px;
            z-index: 10;
        }

        .message-box button {
            margin-top: 15px;
            padding: 10px 20px;
            font-family: 'Press Start 2P', cursive;
            font-size: 14px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            box-shadow: 0 4px #999;
            transition: all 0.1s ease;
        }
        .message-box button:active {
             background-color: #3e8e41;
             box-shadow: 0 2px #666;
             transform: translateY(2px);
        }
    </style>
</head>
<body>
    <div class="game-info">
        수집한 알파벳: <span id="collectedLettersDisplay">_ _ _ _ _</span>
    </div>

    <div class="game-container" id="gameContainer">
        <div class="character" id="character">
             <img src="https://placehold.co/40x40/FF6347/FFFFFF?text=Hero" alt="게임 캐릭터">
        </div>
        <div class="obstacle" id="obstacle"></div>
        <div class="item" id="item"></div>
        <div class="powerup-item" id="powerupItem"></div>
        <div class="alphabet-item" id="alphabetItem"></div> <div class="score" id="score">Score: 0</div>
        <div id="bonusStageMessage">
            BONUS STAGE!<br>
            <span id="bonusTimer">60</span> 초
        </div>
        <div class="message-box" id="messageBox">
            <p id="messageText"></p>
            <button id="restartButton">Restart</button>
        </div>
    </div>

    <script>
        // --- DOM 요소 가져오기 ---
        const character = document.getElementById('character');
        const obstacle = document.getElementById('obstacle');
        const item = document.getElementById('item');
        const powerupItem = document.getElementById('powerupItem');
        const alphabetItem = document.getElementById('alphabetItem');
        const gameContainer = document.getElementById('gameContainer');
        const scoreDisplay = document.getElementById('score');
        const messageBox = document.getElementById('messageBox');
        const messageText = document.getElementById('messageText');
        const restartButton = document.getElementById('restartButton');
        const collectedLettersDisplay = document.getElementById('collectedLettersDisplay');
        const bonusStageMessage = document.getElementById('bonusStageMessage');
        const bonusTimerDisplay = document.getElementById('bonusTimer');

        // --- 게임 상태 변수 ---
        let score = 0;
        let isGameOver = false;
        let gameLoopInterval = null;
        let obstaclePassed = false; // 현재 장애물 통과 여부
        let itemCollected = false; // 현재 코인 충돌 처리 여부
        let obstacleDestroyed = false; // 현재 장애물 파괴 애니메이션 중 여부

        // --- 파워업 상태 변수 ---
        let isPoweredUp = false;
        let powerupTimer = 0; // ms
        const POWERUP_DURATION = 7000; // 7초
        const POWERUP_SCORE_OBSTACLE = 5; // 장애물 파괴 점수

        // --- 물리 엔진 변수 ---
        let characterY = 0; // 캐릭터 bottom 위치
        let velocityY = 0; // 수직 속도
        let jumpCount = 0; // 현재 점프 횟수
        const GRAVITY = 0.6; // 중력 가속도
        const JUMP_FORCE = 12; // 점프 힘
        const MAX_JUMPS = 2; // 최대 점프 횟수

        // --- 장애물 변수 ---
        const MIN_OBSTACLE_HEIGHT = 30; // 최소 높이
        const MAX_OBSTACLE_HEIGHT = 70; // 최대 높이
        const TALL_OBSTACLE_HEIGHT = 140; // 높은 장애물 높이
        const TALL_OBSTACLE_PROBABILITY = 0.25; // 높은 장애물 등장 확률
        const OBSTACLE_ANIMATION_DURATION = 2; // 이동 시간 (초)

        // --- 아이템 변수 ---
        const ITEM_ANIMATION_DURATION = 2.5; // 코인 이동 시간 (초)
        const ITEM_ANIMATION_DELAY = 0.5; // 코인 등장 지연 (초)
        const POWERUP_ITEM_ANIMATION_DURATION = 4; // 파워업 아이템 이동 시간 (초)
        const POWERUP_ITEM_ANIMATION_DELAY = 2; // 파워업 아이템 등장 지연 (초)
        const ALPHABET_ITEM_ANIMATION_DURATION = 3.5; // 알파벳 아이템 이동 시간 (초)
        const ALPHABET_ITEM_ANIMATION_DELAY = 1.5; // 알파벳 아이템 등장 지연 (초)

        // --- 보너스 스테이지 & 알파벳 수집 변수 ---
        const neededLetters = ['B', 'O', 'N', 'U', 'S']; // 필요한 알파벳
        let collectedLetters = []; // 수집한 알파벳 배열
        let currentAlphabetIndex = 0; // 다음에 등장할 알파벳 인덱스
        let isInBonusStage = false; // 보너스 스테이지 진행 여부
        let bonusStageTimer = 0; // 보너스 남은 시간 (ms)
        const BONUS_STAGE_DURATION = 60000; // 60초
        let bonusCoinInterval = null; // 보너스 코인 생성 인터벌 ID
        const BONUS_COIN_INTERVAL_MS = 800; // 보너스 코인 생성 간격 (0.8초)

        /**
         * 캐릭터 점프 함수
         */
        function jump() {
            // 최대 점프 횟수 미만이고 게임오버가 아닐 때 점프 가능
            if (jumpCount < MAX_JUMPS && !isGameOver) {
                velocityY = JUMP_FORCE; // 수직 속도 설정 (위로)
                jumpCount++; // 점프 횟수 증가
            }
        }

        /**
         * 캐릭터 위치 업데이트 (중력, 점프, 파워업/보너스 타이머)
         */
        function updateCharacterPosition() {
            if (isGameOver) return; // 게임오버 시 중단

            // 중력 적용
            velocityY -= GRAVITY;
            characterY += velocityY;

            // 바닥 충돌 처리
            if (characterY <= 0) {
                characterY = 0;
                velocityY = 0;
                jumpCount = 0; // 점프 횟수 초기화
            }

            // 캐릭터 DOM 요소 위치 업데이트
            character.style.bottom = characterY + 'px';

            // 파워업 타이머 업데이트
            if (isPoweredUp) {
                powerupTimer -= 20; // 게임 루프 간격(20ms)만큼 감소
                if (powerupTimer <= 0) {
                    // 파워업 종료
                    isPoweredUp = false;
                    character.classList.remove('character-powered-up');
                }
            }

            // 보너스 스테이지 타이머 업데이트
            if (isInBonusStage) {
                bonusStageTimer -= 20; // 게임 루프 간격(20ms)만큼 감소
                bonusTimerDisplay.textContent = Math.ceil(bonusStageTimer / 1000); // 남은 시간(초) 표시
                if (bonusStageTimer <= 0) {
                    endBonusStage(); // 보너스 스테이지 종료
                }
            }
        }


        // --- 이벤트 리스너 설정 ---
        document.addEventListener('keydown', (event) => {
            if (event.code === 'Space') { jump(); } // 스페이스바로 점프
        });
        gameContainer.addEventListener('touchstart', jump); // 터치로 점프
        gameContainer.addEventListener('click', jump); // 클릭으로 점프
        restartButton.addEventListener('click', restartGame); // 재시작 버튼 클릭


        // --- 충돌 감지 함수들 ---

        /**
         * 장애물 충돌 감지 및 처리
         * @returns {boolean} 게임 오버 여부 (true: 게임 오버, false: 계속 진행)
         */
        function checkObstacleCollision() {
             // 보너스 중이거나, 장애물이 안 보이거나, 파괴 중이면 충돌 없음
             if (isInBonusStage || window.getComputedStyle(obstacle).display === 'none' || obstacleDestroyed) {
                return false;
            }
            const characterRect = character.getBoundingClientRect();
            const obstacleRect = obstacle.getBoundingClientRect();
            const padding = 5; // 충돌 판정 여유
            // 충돌 조건 계산
            const collision = (
                characterRect.bottom > obstacleRect.top + padding &&
                characterRect.top < obstacleRect.bottom - padding &&
                characterRect.right > obstacleRect.left + padding &&
                characterRect.left < obstacleRect.right - padding
            );

            if (collision) {
                if (isPoweredUp) { // 파워업 상태일 때
                    score += POWERUP_SCORE_OBSTACLE; // 점수 추가
                    scoreDisplay.textContent = `Score: ${score}`;
                    obstacle.classList.add('obstacle-destroyed'); // 파괴 애니메이션 시작
                    obstacleDestroyed = true; // 파괴 중 플래그 설정
                    return false; // 게임 계속 진행
                } else { // 일반 상태일 때
                    return true; // 게임 오버
                }
            }
            return false; // 충돌 없음
        }

        /**
         * 아이템(코인) 충돌 감지
         * @returns {boolean} 충돌 여부
         */
        function checkItemCollision() {
            // 코인이 안 보이거나, 이미 이번 프레임에서 충돌 처리되었으면 감지 안 함
            if (window.getComputedStyle(item).display === 'none' || itemCollected) return false;
            const characterRect = character.getBoundingClientRect();
            const itemRect = item.getBoundingClientRect();
            // 충돌 조건 계산
            return (
                characterRect.bottom > itemRect.top &&
                characterRect.top < itemRect.bottom &&
                characterRect.right > itemRect.left &&
                characterRect.left < itemRect.right
            );
        }

        /**
         * 파워업 아이템 충돌 감지
         * @returns {boolean} 충돌 여부
         */
        function checkPowerupCollision() {
             // 보너스 중이거나, 아이템이 안 보이거나, 이미 파워업 상태면 감지 안 함
             if (isInBonusStage || window.getComputedStyle(powerupItem).display === 'none' || isPoweredUp) {
                 return false;
             }
            const characterRect = character.getBoundingClientRect();
            const powerupRect = powerupItem.getBoundingClientRect();
            // 충돌 조건 계산
            return (
                characterRect.bottom > powerupRect.top &&
                characterRect.top < powerupRect.bottom &&
                characterRect.right > powerupRect.left &&
                characterRect.left < powerupRect.right
            );
        }

         /**
          * 알파벳 아이템 충돌 감지
          * @returns {boolean} 충돌 여부
          */
         function checkAlphabetCollision() {
             // 보너스 중이거나, 아이템이 안 보이면 감지 안 함
             if (isInBonusStage || window.getComputedStyle(alphabetItem).display === 'none') {
                 return false;
             }
            const characterRect = character.getBoundingClientRect();
            const alphabetRect = alphabetItem.getBoundingClientRect();
            // 충돌 조건 계산
            return (
                characterRect.bottom > alphabetRect.top &&
                characterRect.top < alphabetRect.bottom &&
                characterRect.right > alphabetRect.left &&
                characterRect.left < alphabetRect.right
            );
         }


        /**
         * 게임 오버 처리 함수
         */
        function gameOver() {
            isGameOver = true; // 게임 오버 상태 설정
            clearInterval(gameLoopInterval); // 메인 게임 루프 정지
            if (bonusCoinInterval) clearInterval(bonusCoinInterval); // 보너스 코인 인터벌 정지

            // 모든 요소 애니메이션 정지
            obstacle.style.animationPlayState = 'paused';
            item.style.animationPlayState = 'paused';
            powerupItem.style.animationPlayState = 'paused';
            alphabetItem.style.animationPlayState = 'paused';
            // 게임 오버 메시지 표시
            messageText.textContent = `Game Over! Score: ${score}`;
            messageBox.style.display = 'block';
        }

        // --- 리셋 함수들 ---

         /**
          * 장애물 리셋 함수 (위치, 높이, 타입, 애니메이션 재설정)
          */
         function resetObstacle() {
             // 보너스 중이면 숨기고 종료
             if (isInBonusStage) {
                 obstacle.style.display = 'none';
                 return;
             }
            // 기존 상태 초기화
            obstacle.style.animation = 'none';
            obstacle.classList.remove('obstacle-destroyed', 'obstacle-tall');
            obstacle.style.display = 'block';
            obstacle.style.transform = 'scale(1)';
            obstacle.style.opacity = '1';
            obstacleDestroyed = false;

            // 확률적으로 높이 및 타입 결정
            let obstacleType = "Regular";
            if (Math.random() < TALL_OBSTACLE_PROBABILITY) {
                obstacle.style.height = TALL_OBSTACLE_HEIGHT + 'px';
                obstacle.classList.add('obstacle-tall');
                obstacleType = "Tall";
            } else {
                const newHeight = Math.floor(Math.random() * (MAX_OBSTACLE_HEIGHT - MIN_OBSTACLE_HEIGHT + 1)) + MIN_OBSTACLE_HEIGHT;
                obstacle.style.height = newHeight + 'px';
            }
            // console.log("Resetting obstacle. Type:", obstacleType, "Height:", obstacle.style.height); // 디버깅 로그

            // 위치 및 통과 플래그 초기화
            obstacle.style.right = '-30px';
            obstaclePassed = false;

            // 잠시 후 이동 애니메이션 시작
            setTimeout(() => {
                if(isGameOver || isInBonusStage) return; // 게임오버/보너스 중이면 시작 안 함
                obstacle.style.animation = `moveObstacle ${OBSTACLE_ANIMATION_DURATION}s linear`;
                obstacle.style.animationPlayState = 'running';
            }, 10);
         }

         /**
          * 아이템(코인) 리셋 함수 (위치, 높이, 애니메이션 재설정)
          */
         function resetItem() {
             // console.log("resetItem called. Bonus stage:", isInBonusStage); // 디버깅 로그
             item.style.animation = 'none'; // 진행중 애니메이션 제거
             item.style.right = '-80px'; // 시작 위치
             item.style.display = 'block'; // 보이게
             itemCollected = false; // 충돌 플래그 리셋

             // 높이 설정: 보너스 스테이지에서는 랜덤, 아니면 고정
             if (isInBonusStage) {
                 const randomBottom = Math.floor(Math.random() * 81) + 40; // 40px ~ 120px
                 item.style.bottom = randomBottom + 'px';
                 // console.log("Bonus item height:", randomBottom); // 디버깅 로그
             } else {
                 item.style.bottom = '80px'; // 기본 높이
             }

             // 잠시 후 이동 애니메이션 시작
             setTimeout(() => {
                if(isGameOver) return; // 게임오버 시 시작 안 함
                 const duration = ITEM_ANIMATION_DURATION; // 보너스에서도 기본 속도 유지 (빈도는 인터벌로 제어)
                 const delay = isInBonusStage ? 0 : ITEM_ANIMATION_DELAY; // 보너스에선 딜레이 없음
                 // console.log("Starting item animation. Duration:", duration, "Delay:", delay); // 디버깅 로그
                 item.style.animation = `moveItem ${duration}s linear ${delay}s`;
                 item.style.animationPlayState = 'running';
            }, 10);
         }

         /**
          * 파워업 아이템 리셋 함수
          */
         function resetPowerupItem() {
             // 보너스 중이면 숨기고 종료
             if (isInBonusStage) {
                 powerupItem.style.display = 'none';
                 return;
             }
             powerupItem.style.animation = 'none';
             powerupItem.style.right = '-150px';
             powerupItem.style.display = 'block';

             // 잠시 후 이동 애니메이션 시작
             setTimeout(() => {
                if(isGameOver || isInBonusStage) return; // 게임오버/보너스 중이면 시작 안 함
                 powerupItem.style.animation = `movePowerupItem ${POWERUP_ITEM_ANIMATION_DURATION}s linear ${POWERUP_ITEM_ANIMATION_DELAY}s`;
                 powerupItem.style.animationPlayState = 'running';
            }, 10);
         }

         /**
          * 알파벳 아이템 리셋 함수
          */
         function resetAlphabetItem() {
             // 보너스 중이거나 모든 알파벳 모았으면 숨기고 종료
             if (isInBonusStage || collectedLetters.length === neededLetters.length) {
                 alphabetItem.style.display = 'none';
                 return;
             }
             alphabetItem.style.animation = 'none';
             // 다음 알파벳 설정
             const nextLetter = neededLetters[currentAlphabetIndex];
             alphabetItem.textContent = nextLetter;
             alphabetItem.dataset.letter = nextLetter; // data 속성에 저장

             // 위치 및 표시 설정
             alphabetItem.style.right = '-200px';
             alphabetItem.style.display = 'flex';

             // 잠시 후 이동 애니메이션 시작
             setTimeout(() => {
                if(isGameOver || isInBonusStage) return; // 게임오버/보너스 중이면 시작 안 함
                 alphabetItem.style.animation = `moveAlphabetItem ${ALPHABET_ITEM_ANIMATION_DURATION}s linear ${ALPHABET_ITEM_ANIMATION_DELAY}s`;
                 alphabetItem.style.animationPlayState = 'running';
            }, 10);
         }

        /**
         * 수집한 알파벳 UI 업데이트 함수
         */
        function updateCollectedLettersUI() {
            let displayString = "";
            // 필요한 알파벳 순서대로 확인하며 표시 문자열 생성
            for (const letter of neededLetters) {
                if (collectedLetters.includes(letter)) {
                    displayString += letter + " "; // 수집했으면 알파벳 표시
                } else {
                    displayString += "_ "; // 아니면 밑줄 표시
                }
            }
            collectedLettersDisplay.textContent = displayString.trim(); // 공백 제거 후 적용
        }

        // --- 보너스 스테이지 관련 함수 ---

        /**
         * 보너스 스테이지 시작 함수
         */
        function startBonusStage() {
            isInBonusStage = true; // 보너스 상태 설정
            bonusStageTimer = BONUS_STAGE_DURATION; // 타이머 설정

            // UI 변경
            gameContainer.classList.add('bonus-stage'); // 배경 변경 클래스 추가
            bonusStageMessage.style.display = 'block'; // 메시지 표시
            bonusTimerDisplay.textContent = Math.ceil(bonusStageTimer / 1000); // 타이머 표시

            // 일반 게임 요소 숨기기 및 정지
            obstacle.style.display = 'none';
            obstacle.style.animationPlayState = 'paused';
            powerupItem.style.display = 'none';
            powerupItem.style.animationPlayState = 'paused';
            alphabetItem.style.display = 'none';
            alphabetItem.style.animationPlayState = 'paused';

            // 보너스 코인 생성 시작
            if (bonusCoinInterval) clearInterval(bonusCoinInterval); // 안전하게 기존 인터벌 제거
            resetItem(); // 첫 코인 즉시 생성
            // 설정된 간격으로 코인 리셋 함수 호출 시작
            bonusCoinInterval = setInterval(() => {
                 // console.log("Bonus coin interval tick, calling resetItem..."); // 디버깅 로그
                 if (!isGameOver) { // 게임오버 아닐때만 리셋
                     resetItem();
                 }
            }, BONUS_COIN_INTERVAL_MS);
            // console.log("Bonus stage started. Interval ID:", bonusCoinInterval); // 디버깅 로그
        }

        /**
         * 보너스 스테이지 종료 함수
         */
        function endBonusStage() {
            isInBonusStage = false; // 보너스 상태 해제
            if (bonusCoinInterval) {
                clearInterval(bonusCoinInterval); // 보너스 코인 인터벌 정지
                // console.log("Bonus coin interval cleared:", bonusCoinInterval); // 디버깅 로그
                bonusCoinInterval = null;
            }

            // UI 복원
            gameContainer.classList.remove('bonus-stage'); // 배경 클래스 제거
            bonusStageMessage.style.display = 'none'; // 메시지 숨김

            // 알파벳 상태 초기화
            collectedLetters = [];
            currentAlphabetIndex = 0;
            updateCollectedLettersUI();

            // 일반 게임 요소 애니메이션 상태 복구 및 리셋
             obstacle.style.animationPlayState = 'running';
             powerupItem.style.animationPlayState = 'running';
             alphabetItem.style.animationPlayState = 'running';
            resetObstacle();
            resetItem(); // 일반 상태로 코인 리셋
            resetPowerupItem();
            resetAlphabetItem();
        }


        /**
         * 게임 재시작 함수
         */
        function restartGame() {
            isGameOver = false; // 게임오버 상태 해제
            score = 0; // 점수 초기화
            scoreDisplay.textContent = `Score: ${score}`;
            messageBox.style.display = 'none'; // 게임오버 메시지 숨김

            // 보너스 스테이지 관련 상태 초기화
            if (isInBonusStage) {
                isInBonusStage = false;
                if (bonusCoinInterval) {
                     clearInterval(bonusCoinInterval);
                     bonusCoinInterval = null;
                }
                gameContainer.classList.remove('bonus-stage');
                bonusStageMessage.style.display = 'none';
            }
            collectedLetters = [];
            currentAlphabetIndex = 0;
            updateCollectedLettersUI();

            // 캐릭터 상태 초기화
            characterY = 0;
            velocityY = 0;
            jumpCount = 0;
            character.style.bottom = characterY + 'px';

            // 파워업 상태 초기화
            isPoweredUp = false;
            powerupTimer = 0;
            character.classList.remove('character-powered-up');
            obstacleDestroyed = false;

            // 모든 요소 애니메이션 상태 복구
            obstacle.style.animationPlayState = 'running';
            item.style.animationPlayState = 'running';
            powerupItem.style.animationPlayState = 'running';
            alphabetItem.style.animationPlayState = 'running';

            // 모든 요소 리셋 (위치, 상태 등)
            resetObstacle();
            resetItem();
            resetPowerupItem();
            resetAlphabetItem();

            // 메인 게임 루프 시작
            startGameLoop();
        }


         /**
          * 장애물 통과 점수 업데이트 함수
          */
         function updateScoreOnObstaclePass() {
             // 게임오버, 보너스, 파괴 중에는 점수 안 오름
             if (isGameOver || isInBonusStage || obstacleDestroyed) return;
             // 장애물이 숨겨져 있으면 점수 안 오름
             if (window.getComputedStyle(obstacle).display === 'none') return;

             const obstacleRect = obstacle.getBoundingClientRect();
             const characterRect = character.getBoundingClientRect();

             // 장애물 오른쪽 끝이 캐릭터 왼쪽 끝보다 왼쪽에 있고, 아직 통과 처리 안됐으면
             if (obstacleRect.right > 0 && obstacleRect.right < characterRect.left && !obstaclePassed) {
                 score++; // 점수 증가
                 scoreDisplay.textContent = `Score: ${score}`;
                 obstaclePassed = true; // 통과 처리
             }
         }

        /**
         * 메인 게임 루프 시작 함수
         */
        function startGameLoop() {
            if (gameLoopInterval) { clearInterval(gameLoopInterval); } // 기존 루프 제거
            // 20ms 간격으로 게임 상태 업데이트 및 확인 반복
            gameLoopInterval = setInterval(() => {
                 if (!isGameOver) { // 게임오버 아니면 실행
                    updateCharacterPosition(); // 캐릭터 위치 업데이트
                    checkCollisionsAndScore(); // 충돌 및 점수 확인
                 }
            }, 20); // 약 50 FPS
        }

        /**
         * 충돌 감지 및 점수 업데이트 통합 함수 (매 프레임 호출)
         */
        function checkCollisionsAndScore() {
             // 1. 장애물 충돌 확인
             if (checkObstacleCollision()) {
                 // 파워업 상태 아닐 때만 게임 오버
                 if (!isPoweredUp) { gameOver(); return; }
             }

             // 2. 아이템(코인) 충돌 확인
             if (checkItemCollision()) {
                 // console.log("Coin collected!"); // 디버깅 로그
                 score += isInBonusStage ? 20 : 10; // 보너스 시 20점, 평소 10점
                 scoreDisplay.textContent = `Score: ${score}`;
                 itemCollected = true; // 충돌 처리됨 플래그 설정
                 item.style.display = 'none'; // 즉시 숨김 (리셋은 인터벌 또는 animationend)
             }

             // 3. 파워업 아이템 충돌 확인
             if (checkPowerupCollision()) {
                 isPoweredUp = true; // 파워업 상태 설정
                 powerupTimer = POWERUP_DURATION; // 타이머 시작
                 character.classList.add('character-powered-up'); // 캐릭터 외형 변경
                 powerupItem.style.display = 'none'; // 아이템 숨김 (리셋은 animationend)
             }

             // 4. 알파벳 아이템 충돌 확인
             if (checkAlphabetCollision()) {
                 const collectedLetter = alphabetItem.dataset.letter; // 획득한 알파벳 확인
                 if (!collectedLetters.includes(collectedLetter)) { // 중복 획득 방지
                     collectedLetters.push(collectedLetter); // 수집 배열에 추가
                     currentAlphabetIndex = (currentAlphabetIndex + 1) % neededLetters.length; // 다음 알파벳 인덱스 순환
                     updateCollectedLettersUI(); // 화면 표시 업데이트
                     alphabetItem.style.display = 'none'; // 아이템 숨김

                     // 모든 알파벳 수집 완료 확인
                     if (collectedLetters.length === neededLetters.length) {
                         startBonusStage(); // 보너스 스테이지 시작!
                     } else {
                          // 다음 알파벳 아이템 즉시 리셋 (0.1초 후)
                          setTimeout(resetAlphabetItem, 100);
                     }
                 }
             }

             // 5. 장애물 통과 점수 업데이트
             updateScoreOnObstaclePass();
        }

        // --- 애니메이션 종료 이벤트 리스너들 ---
        obstacle.addEventListener('animationend', (event) => {
             // console.log('Obstacle animation ended:', event.animationName, 'Destroyed flag:', obstacleDestroyed); // 디버깅 로그
             // 게임오버 아니고, 보너스 아니고, 파괴 애니메이션 끝났을 때
             if (!isGameOver && !isInBonusStage && event.animationName === 'obstacleDestroy') {
                 obstacle.style.display = 'none'; // 확실히 숨김
                 resetObstacle(); // 다음 장애물 준비
             }
             // 게임오버 아니고, 보너스 아니고, 파괴 중 아니고, 이동 애니메이션 끝났을 때
             else if (!isGameOver && !isInBonusStage && event.animationName === 'moveObstacle' && !obstacleDestroyed) {
                 resetObstacle(); // 다음 장애물 준비
             }
        });


        item.addEventListener('animationend', () => {
             // 일반 상태일 때만 animationend로 리셋
             if (!isGameOver && !isInBonusStage) {
                // console.log("Item animation ended in normal stage, resetting..."); // 디버깅 로그
                 resetItem();
             }
        });

        powerupItem.addEventListener('animationend', () => {
             // 일반 상태일 때만 animationend로 리셋
             if (!isGameOver && !isInBonusStage) { resetPowerupItem(); }
        });

        alphabetItem.addEventListener('animationend', (event) => {
             // 일반 상태이고, 모든 글자 모으지 않았고, 화면에 보이는 상태로 끝났을 때 (획득 안됨)
             if (!isGameOver && !isInBonusStage && collectedLetters.length < neededLetters.length && window.getComputedStyle(alphabetItem).display !== 'none') {
                 resetAlphabetItem(); // 다음 알파벳 준비
             }
        });


        // --- 페이지 로드 시 게임 시작 ---
        window.onload = function() {
            updateCollectedLettersUI(); // 초기 알파벳 UI 설정
            // 모든 요소 초기화 및 첫 등장 준비
            resetObstacle();
            resetItem();
            resetPowerupItem();
            resetAlphabetItem();
            // 메인 게임 루프 시작
            startGameLoop();
        };

    </script>
</body>
</html>
